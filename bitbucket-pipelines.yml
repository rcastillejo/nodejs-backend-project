pipelines:
 default:
  - step: 
     image: node:10.8.0
     name: build and test
     caches:
      - node
     script: 
      - echo "variable ${API_KEY}"
      - npm install
      - npm test
      - IMAGE_NAME=rcastillejo/techu-project
      - VERSION="0.1.${BITBUCKET_BUILD_NUMBER}"
      - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
      - docker build -t ${IMAGE_NAME}:${VERSION} .
      - docker push "${IMAGE_NAME}:${VERSION}"
      - docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}
      - docker push "${IMAGE_NAME}"
     services:
      - docker
  - parallel:
    - step:
        image: atlassian/default-image:2
        name: Deploy to ECS
        script:
          - VERSION="0.1.${BITBUCKET_BUILD_NUMBER}"
          # Replace the docker image name in the task definition with the newly pushed image.
          - export IMAGE_NAME="rcastillejo/techu-project:${VERSION}"
          - envsubst < task-definition-template.json >  task-definition.json

          # Update the task definition.
          - pipe: atlassian/aws-ecs-deploy:1.2.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              CLUSTER_NAME: 'default'
              SERVICE_NAME: 'techu-ecs-service'
              TASK_DEFINITION: 'task-definition.json'
    - step:
        image: openshift/origin-cli
        name: Deploy to Openshift
        script:
          - oc login "https://${OPS_INSTANCE}.environments.katacoda.com:443" -u developer -p developer
          - oc project myproject
          - oc rollout latest dc/techu-project -n myproject
          - oc get -o template route myproject --template={{.spec.host}}